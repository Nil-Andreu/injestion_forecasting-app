# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.sp500_pb2 as sp500__pb2


class ListSearchSPStub(object):
    """message StatusRequest {
    string query = 1;
    int16 status = 2;  it is a mandatory field
    int16 date = 3;
    repeated string list_strings = 4;  repeated: the field might be repeated from 0 - infinite number of times
    optional int32 random = 5;   it is an optional field
    }

    Service for obtaining list of S&P500 companies
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCompaniesSP = channel.unary_unary(
                '/ListSearchSP/ListCompaniesSP',
                request_serializer=sp500__pb2.SearchRequestSP.SerializeToString,
                response_deserializer=sp500__pb2.SearchResponseSP.FromString,
                )
        self.ListCompaniesSPStreamSingleResponse = channel.stream_unary(
                '/ListSearchSP/ListCompaniesSPStreamSingleResponse',
                request_serializer=sp500__pb2.SearchRequestSP.SerializeToString,
                response_deserializer=sp500__pb2.SearchResponseSP.FromString,
                )
        self.ListCompaniesSPRequestStreamResponse = channel.unary_stream(
                '/ListSearchSP/ListCompaniesSPRequestStreamResponse',
                request_serializer=sp500__pb2.SearchRequestSP.SerializeToString,
                response_deserializer=sp500__pb2.SearchResponseSP.FromString,
                )
        self.ListCompaniesSPStreamRequestStreamResponse = channel.stream_stream(
                '/ListSearchSP/ListCompaniesSPStreamRequestStreamResponse',
                request_serializer=sp500__pb2.SearchRequestSP.SerializeToString,
                response_deserializer=sp500__pb2.SearchResponseSP.FromString,
                )


class ListSearchSPServicer(object):
    """message StatusRequest {
    string query = 1;
    int16 status = 2;  it is a mandatory field
    int16 date = 3;
    repeated string list_strings = 4;  repeated: the field might be repeated from 0 - infinite number of times
    optional int32 random = 5;   it is an optional field
    }

    Service for obtaining list of S&P500 companies
    """

    def ListCompaniesSP(self, request, context):
        """Obtainig list of S&P500 companies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCompaniesSPStreamSingleResponse(self, request_iterator, context):
        """Streaming the information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCompaniesSPRequestStreamResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCompaniesSPStreamRequestStreamResponse(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ListSearchSPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCompaniesSP': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCompaniesSP,
                    request_deserializer=sp500__pb2.SearchRequestSP.FromString,
                    response_serializer=sp500__pb2.SearchResponseSP.SerializeToString,
            ),
            'ListCompaniesSPStreamSingleResponse': grpc.stream_unary_rpc_method_handler(
                    servicer.ListCompaniesSPStreamSingleResponse,
                    request_deserializer=sp500__pb2.SearchRequestSP.FromString,
                    response_serializer=sp500__pb2.SearchResponseSP.SerializeToString,
            ),
            'ListCompaniesSPRequestStreamResponse': grpc.unary_stream_rpc_method_handler(
                    servicer.ListCompaniesSPRequestStreamResponse,
                    request_deserializer=sp500__pb2.SearchRequestSP.FromString,
                    response_serializer=sp500__pb2.SearchResponseSP.SerializeToString,
            ),
            'ListCompaniesSPStreamRequestStreamResponse': grpc.stream_stream_rpc_method_handler(
                    servicer.ListCompaniesSPStreamRequestStreamResponse,
                    request_deserializer=sp500__pb2.SearchRequestSP.FromString,
                    response_serializer=sp500__pb2.SearchResponseSP.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ListSearchSP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ListSearchSP(object):
    """message StatusRequest {
    string query = 1;
    int16 status = 2;  it is a mandatory field
    int16 date = 3;
    repeated string list_strings = 4;  repeated: the field might be repeated from 0 - infinite number of times
    optional int32 random = 5;   it is an optional field
    }

    Service for obtaining list of S&P500 companies
    """

    @staticmethod
    def ListCompaniesSP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ListSearchSP/ListCompaniesSP',
            sp500__pb2.SearchRequestSP.SerializeToString,
            sp500__pb2.SearchResponseSP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCompaniesSPStreamSingleResponse(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ListSearchSP/ListCompaniesSPStreamSingleResponse',
            sp500__pb2.SearchRequestSP.SerializeToString,
            sp500__pb2.SearchResponseSP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCompaniesSPRequestStreamResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ListSearchSP/ListCompaniesSPRequestStreamResponse',
            sp500__pb2.SearchRequestSP.SerializeToString,
            sp500__pb2.SearchResponseSP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCompaniesSPStreamRequestStreamResponse(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ListSearchSP/ListCompaniesSPStreamRequestStreamResponse',
            sp500__pb2.SearchRequestSP.SerializeToString,
            sp500__pb2.SearchResponseSP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
